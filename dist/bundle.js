/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_components_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-components/game */ \"./src/js-components/game.js\");\n/* harmony import */ var _js_components_timeHistoryContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./js-components/timeHistoryContainer */ \"./src/js-components/timeHistoryContainer.js\");\n/* harmony import */ var _js_components_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./js-components/timer */ \"./src/js-components/timer.js\");\n/* harmony import */ var _js_components_starting_page_logo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js-components/starting_page/logo */ \"./src/js-components/starting_page/logo.js\");\n/* harmony import */ var _js_components_starting_page_logo__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_js_components_starting_page_logo__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _js_components_starting_page_menuContainer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js-components/starting_page/menuContainer */ \"./src/js-components/starting_page/menuContainer.js\");\n/* harmony import */ var _js_components_starting_page_menuContainer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_js_components_starting_page_menuContainer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _js_components_end_page_endListener__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./js-components/end-page/endListener */ \"./src/js-components/end-page/endListener.js\");\n/* harmony import */ var _js_components_starting_page_lang__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./js-components/starting_page/lang */ \"./src/js-components/starting_page/lang.js\");\n/* harmony import */ var _js_components_starting_page_lang__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_js_components_starting_page_lang__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\ndocument.querySelectorAll('.board-container div').forEach((element) => {\n  element.addEventListener('click', selectPiece);\n});\n\ndocument.body.appendChild(_js_components_starting_page_lang__WEBPACK_IMPORTED_MODULE_6___default()());\n\ndocument.querySelector('.eng').addEventListener('click', () => {\n  document.documentElement.lang = 'en';\n  localStorage.setItem('lang', 'en');\n  document.location.reload();\n  console.log('ang');\n});\n\ndocument.querySelector('.pl').addEventListener('click', () => {\n  document.documentElement.lang = 'pl';\n  localStorage.setItem('lang', 'pl');\n  document.location.reload();\n  console.log('pl');\n});\n\nif (localStorage) {\n  document.documentElement.lang = localStorage.getItem('lang');\n} else {\n  document.documentElement.lang = \"pl\";\n}\n\n// load start window\ndocument.body.appendChild(_js_components_starting_page_logo__WEBPACK_IMPORTED_MODULE_3___default()());\ndocument.body.appendChild(_js_components_starting_page_menuContainer__WEBPACK_IMPORTED_MODULE_4___default()());\n\n// time\nvar gameTime = document.querySelector('.rs-range');\nvar time = document.querySelector('.rs-range').value / 2;\ngameTime.onchange = function (event) {\n  time = document.querySelector('.rs-range').value / 2;\n};\n// firstPlayer\nvar player1 = document.getElementById(\"player1-input\");\nvar player1Name = player1.placeholder;\nplayer1.onchange = function(event){\n  player1Name = player1.value;\n}\n// secondPlayer\nvar player2 = document.getElementById(\"player2-input\");\nvar player2Name = player2.placeholder;\nplayer2.onchange = function(event){\n  player2Name = player2.value;\n}\n\n//stalemate mode\nlet P1 = document.getElementsByClassName(\"menuCheckList\")[0];\nlet P2 = P1.getElementsByTagName(\"label\")[0];\nlet P3 = P2.getElementsByTagName(\"span\")[0];\nlet P33 = P2.getElementsByTagName(\"input\")[0];\n\nlet P4 = document.getElementsByClassName(\"menuCheckList\")[0];\nlet P5 = P4.getElementsByTagName(\"label\")[1];\nlet P6 = P5.getElementsByTagName(\"span\")[0];\nlet P66 = P5.getElementsByTagName(\"input\")[0];\n\nvar target = P3.innerHTML;\n\nP3.onclick = function(event) {\n  target = P3.innerHTML;\n};\n\nP6.onclick = function(event) {\n  target = P6.innerHTML;\n};\n\nP33.onclick = function(event) {\n  target = P3.innerHTML;\n};\n\nP66.onclick = function(event) {\n  target = P6.innerHTML;\n};\n\n// end test button\n// const testButton = document.querySelector('.testEnd');\n// testButton.addEventListener('click', () => {\n//   let endModalResult = new endResult('USER1', 'USER2', 'Mateusz', 'czas');\n//   endModalResult.showResult();\n// });\n\n// start the game after click button\nconst startButton = document.querySelector('.start-button');\nstartButton.addEventListener('click', () => {\n  // hide start box after start the game\n  let logoElement = document.querySelector('.logo');\n  let menuContainer = document.querySelector('.menuContainer');\n  let bodyContainer = document.getElementsByTagName('body');\n  bodyContainer[0].classList.remove('body-start-page');\n  logoElement.classList.add('display-none');\n  menuContainer.remove();\n\n  // new Game\n  const game = new _js_components_game__WEBPACK_IMPORTED_MODULE_0__.Game(time, player1Name, player2Name, target);\n  _js_components_game__WEBPACK_IMPORTED_MODULE_0__.Game.getWhiteTimer().start();\n  //document.body.appendChild(game.timeHistory.timeHistoryContainer());\n  //var TimerTry = new Timer(60, 'timer-white');\n  //var TimerTry1 = new Timer(60, 'timer-black');\n\n  // TEST:\n  // if (true) {\n  //   TimerTry.start();\n  // }\n  // let el = document.getElementById('timer-black');\n  // if (true) {\n  //   TimerTry1.start();\n  // }\n  document.querySelectorAll('.board-container div').forEach((element) => {\n    element.addEventListener('click', selectPiece);\n  });\n  function selectPiece(e) {\n    if (e.target.parentElement.classList.contains('pieceInside'))\n      game.startMove(e.target.parentElement);\n  }\n\n  document.querySelector('.undo-button').addEventListener('click', () => {\n    if(_js_components_game__WEBPACK_IMPORTED_MODULE_0__.Game.moveCounter === true){\n      _js_components_game__WEBPACK_IMPORTED_MODULE_0__.Game.reverseMove();\n      _js_components_game__WEBPACK_IMPORTED_MODULE_0__.Game.moveCounter = false;\n    }\n  });\n\n  document.querySelector('.exit-button').addEventListener('click', () => {\n    location.reload();\n  });\n  \n});\n\n// document.querySelector('.eng')?.addEventListener('click', () => {\n//   document.documentElement.lang = 'en';\n// });\n// document.querySelector('.pl').addEventListener('click', () => {\n//   document.documentElement.lang = 'pl';\n// });\n\n\n//# sourceURL=webpack://projekt3-chess/./src/index.js?");

/***/ }),

/***/ "./src/js-components/addMoveHistory.js":
/*!*********************************************!*\
  !*** ./src/js-components/addMoveHistory.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addMoveHistory = void 0;\nfunction addMoveHistory(history, color) {\n    const timeHistoryContainer = document.getElementsByClassName(\"history-div-body\")[0];\n    const moveHeader = document.createElement(\"div\");\n    moveHeader.className = \"history-moveHeader\";\n    moveHeader.innerHTML = color;\n    const move = document.createElement(\"div\");\n    move.className = \"history-move\";\n    move.innerHTML = history;\n    timeHistoryContainer.appendChild(moveHeader);\n    timeHistoryContainer.appendChild(move);\n    timeHistoryContainer.scrollTop = moveHeader.offsetHeight + moveHeader.offsetTop;\n    return timeHistoryContainer;\n}\nexports.addMoveHistory = addMoveHistory;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/addMoveHistory.js?");

/***/ }),

/***/ "./src/js-components/board.js":
/*!************************************!*\
  !*** ./src/js-components/board.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ID = exports.Board = void 0;\nvar ID;\n(function (ID) {\n    ID[ID[\"A\"] = 1] = \"A\";\n    ID[ID[\"B\"] = 2] = \"B\";\n    ID[ID[\"C\"] = 3] = \"C\";\n    ID[ID[\"D\"] = 4] = \"D\";\n    ID[ID[\"E\"] = 5] = \"E\";\n    ID[ID[\"F\"] = 6] = \"F\";\n    ID[ID[\"G\"] = 7] = \"G\";\n    ID[ID[\"H\"] = 8] = \"H\";\n})(ID || (ID = {}));\nexports.ID = ID;\nclass Board {\n    drawBoard() {\n        const boardWrapper = document.createElement('div');\n        boardWrapper.classList.add('board-wrapper');\n        const letters = document.createElement('div');\n        letters.classList.add('letters');\n        const numbers = document.createElement('div');\n        numbers.classList.add('numbers');\n        const boardContainer = document.createElement('div');\n        boardContainer.classList.add('board-container');\n        for (let i = 1; i < 9; i++) {\n            const div = document.createElement('div');\n            div.classList.add('notation');\n            div.innerText = `${ID[i]}`;\n            letters.appendChild(div);\n        }\n        for (let i = 8; i > 0; i--) {\n            const num = document.createElement('div');\n            num.innerText = `${i}`;\n            numbers.appendChild(num);\n        }\n        for (let i = 8; i > 0; i--) {\n            for (let j = 1; j < 9; j++) {\n                const div = document.createElement('div');\n                div.id = `${ID[j]}-${i}`; //<-- ważne żeby każdą komórkę na planszy dało się zidentyfikować za pomocą dwóch współrzędnych\n                if (i % 2 === 0)\n                    div.classList.add(`${j % 2 === 0 ? 'dark' : 'light'}`);\n                else\n                    div.classList.add(`${j % 2 === 0 ? 'light' : 'dark'}`);\n                boardContainer.appendChild(div);\n            }\n        }\n        document.querySelector('body').appendChild(boardWrapper).appendChild(numbers);\n        boardWrapper.appendChild(boardContainer);\n        boardWrapper.appendChild(letters);\n    }\n}\nexports.Board = Board;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/board.js?");

/***/ }),

/***/ "./src/js-components/end-page/endListener.js":
/*!***************************************************!*\
  !*** ./src/js-components/end-page/endListener.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.endResult = void 0;\nclass endResult {\n    constructor(user1, user2, winer, how) {\n        this.user1 = user1;\n        this.user2 = user2;\n        this.winer = winer;\n        this.how = how;\n        this.boardWrapper = document.querySelector('.board-wrapper');\n        this.timeHistoryContainer = document.querySelector('.time-history-container');\n        this.bodyContainer = document.getElementsByTagName('body');\n        this.logoElement = document.querySelector('.logo');\n        this.menuContainer = document.querySelector('.menuContainer');\n    }\n    showResult() {\n        this.logoElement.classList.remove('display-none');\n        this.bodyContainer[0].classList.add('body-start-page');\n        this.timeHistoryContainer.remove();\n        this.boardWrapper.remove();\n        const obj = {\n            user1: this.user1,\n            user2: this.user2,\n            winner: this.winer,\n            how: this.how\n        };\n        function title() {\n            const titleDiv = document.createElement(\"div\");\n            titleDiv.className = \"menuTitle\";\n            const title = document.createElement(\"h1\");\n            title.innerHTML = \"KONIEC GRY\";\n            if (document.documentElement.lang === 'en') {\n                title.innerHTML = \"END OF THE GAME\";\n            }\n            titleDiv.appendChild(title);\n            return title;\n        }\n        function gameResult() {\n            const nameDiv = document.createElement(\"div\");\n            nameDiv.className = \"menuNames\";\n            const title = document.createElement(\"h2\");\n            const title2 = document.createElement(\"h3\");\n            title.className = \"title-result how-information\";\n            title2.className = \"title-result\";\n            if (obj.how === 'pat') {\n                title.innerHTML = `PAT`;\n                title2.innerHTML = `Wygrał gracz ${obj.winner}`;\n                if (document.documentElement.lang === 'en') {\n                    title.innerHTML = \"STALEMATE\";\n                    title2.innerHTML = `Player ${obj.winner} wins`;\n                }\n            }\n            else if (obj.how == 'czas') {\n                title2.innerHTML = `Koniec czasu przeciwnika`;\n                title.innerHTML = `Wygrał gracz ${obj.winner}`;\n                if (document.documentElement.lang === 'en') {\n                    title.innerHTML = \"End of time\";\n                    title2.innerHTML = `Player ${obj.user1} win!`;\n                }\n            }\n            else if (obj.how === 'remis') {\n                title.innerHTML = `REMIS`;\n                title2.innerHTML = `Gracz ${obj.user1} zremisował z graczem ${obj.user2}`;\n                if (document.documentElement.lang === 'en') {\n                    title.innerHTML = \"DRAW\";\n                    title2.innerHTML = `Player ${obj.user1} draw with ${obj.user2}`;\n                }\n            }\n            else {\n                title.innerHTML = `Wygrał gracz ${obj.winner}`;\n                title2.innerHTML = `SZACH-MAT`;\n                if (document.documentElement.lang === 'en') {\n                    title.innerHTML = `Player ${obj.winner} win`;\n                    title2.innerHTML = `CHECKMATE`;\n                }\n            }\n            const inputDiv = document.createElement(\"div\");\n            nameDiv.appendChild(title);\n            nameDiv.appendChild(title2);\n            nameDiv.appendChild(inputDiv);\n            return nameDiv;\n        }\n        function startButton() {\n            const startButtonContainer = document.createElement(\"div\");\n            startButtonContainer.className = \"restart-button\";\n            const startButtonText = document.createElement(\"p\");\n            startButtonText.innerHTML = \"Strona główna\";\n            if (document.documentElement.lang === 'en') {\n                startButtonText.innerHTML = \"Main menu\";\n            }\n            startButtonContainer.addEventListener('click', () => {\n                location.reload();\n            });\n            startButtonContainer.appendChild(startButtonText);\n            return startButtonContainer;\n        }\n        function menuContainer() {\n            const menu = document.createElement(\"div\");\n            menu.className = \"endModal\";\n            menu.appendChild(title());\n            menu.appendChild(gameResult());\n            menu.appendChild(startButton());\n            return menu;\n        }\n        document.body.appendChild(menuContainer());\n    }\n    ;\n}\nexports.endResult = endResult;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/end-page/endListener.js?");

/***/ }),

/***/ "./src/js-components/endGameCases.js":
/*!*******************************************!*\
  !*** ./src/js-components/endGameCases.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.endGame = void 0;\nconst game_1 = __webpack_require__(/*! ./game */ \"./src/js-components/game.js\");\nconst endListener_1 = __webpack_require__(/*! ./end-page/endListener */ \"./src/js-components/end-page/endListener.js\");\nvar endGameCases;\n(function (endGameCases) {\n    endGameCases[\"draw\"] = \"remis\";\n    endGameCases[\"stalemate\"] = \"pat\";\n    endGameCases[\"checkMate\"] = \"\";\n    endGameCases[\"timeUp\"] = \"czas\";\n})(endGameCases || (endGameCases = {}));\nfunction endCase(user1, user2, target) {\n    const whites = game_1.Game.getWhites();\n    const blacks = game_1.Game.getBlacks();\n    const whiteKing = game_1.Game.getWhiteKing();\n    const blackKing = game_1.Game.getBlackKing();\n    const whiteTime = game_1.Game.getWhiteTimer().seconds;\n    const blackTime = game_1.Game.getBlackTimer().seconds;\n    const endGameCase = {\n        player1: user1,\n        player2: user2,\n        target: target,\n        winner: '',\n        how: '',\n        finish: false\n    };\n    if (whites.length === 1 && blacks.length === 1) {\n        endGameCase.how = endGameCases.draw;\n        endGameCase.finish = true;\n        return endGameCase;\n    }\n    console.log(!whiteKing.isChecked());\n    console.log(!whiteKing.isCheckmated());\n    console.log(whiteKing.areAllPossibleMovesInDangerZones());\n    console.log(blackKing.areAllPossibleMovesInDangerZones());\n    console.log(whiteKing.allPossibleMoves());\n    console.log(blackKing.allPossibleMoves());\n    if (!whiteKing.isChecked() && !whiteKing.isCheckmated() && whiteKing.areAllPossibleMovesInDangerZones() && whiteKing.allPossibleMoves() == 0) {\n        if (endGameCase.target == \"PATUJĄCEGO\" || endGameCase.target == \"LOOSE FOR STALEMATED PLAYER\") {\n            console.log('pat');\n            endGameCase.how = endGameCases.stalemate;\n            endGameCase.winner = endGameCase.player2;\n            endGameCase.finish = true;\n            return endGameCase;\n        }\n        else if (endGameCase.target == \"PATOWANEGO\" || endGameCase.target == \"WIN FOR STALEMATED PLAYER\") {\n            console.log('pat');\n            endGameCase.how = endGameCases.stalemate;\n            endGameCase.winner = endGameCase.player1;\n            endGameCase.finish = true;\n            return endGameCase;\n        }\n    }\n    else if (!blackKing.isChecked() && !blackKing.isCheckmated() && blackKing.areAllPossibleMovesInDangerZones() && blackKing.allPossibleMoves() == 0) {\n        if (endGameCase.target == \"PATUJĄCEGO\" || endGameCase.target == \"LOOSE FOR STALEMATED PLAYER\") {\n            console.log('pat');\n            endGameCase.how = endGameCases.stalemate;\n            endGameCase.winner = endGameCase.player1;\n            endGameCase.finish = true;\n            return endGameCase;\n        }\n        else if (endGameCase.target == \"PATOWANEGO\" || endGameCase.target == \"WIN FOR STALEMATED PLAYER\") {\n            console.log('pat');\n            endGameCase.how = endGameCases.stalemate;\n            endGameCase.winner = endGameCase.player2;\n            endGameCase.finish = true;\n            return endGameCase;\n        }\n    }\n    if (whiteKing.isCheckmated()) {\n        endGameCase.how = endGameCases.checkMate;\n        endGameCase.winner = endGameCase.player2;\n        endGameCase.finish = true;\n        return endGameCase;\n    }\n    else if (blackKing.isCheckmated()) {\n        endGameCase.how = endGameCases.checkMate;\n        endGameCase.winner = endGameCase.player1;\n        endGameCase.finish = true;\n        return endGameCase;\n    }\n    if (whiteTime == 0) {\n        endGameCase.how = endGameCases.timeUp;\n        endGameCase.winner = endGameCase.player2;\n        endGameCase.finish = true;\n        return endGameCase;\n    }\n    else if (blackTime == 0) {\n        endGameCase.how = endGameCases.timeUp;\n        endGameCase.winner = endGameCase.player1;\n        endGameCase.finish = true;\n        return endGameCase;\n    }\n    return endGameCase;\n}\nfunction endGame(user1, user2, target) {\n    const theEnd = endCase(user1, user2, target);\n    if (theEnd.finish) {\n        setTimeout(() => {\n            let endModalResult = new endListener_1.endResult(theEnd.player1, theEnd.player2, theEnd.winner, theEnd.how);\n            return endModalResult.showResult();\n        }, 1000);\n    }\n    return;\n}\nexports.endGame = endGame;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/endGameCases.js?");

/***/ }),

/***/ "./src/js-components/game.js":
/*!***********************************!*\
  !*** ./src/js-components/game.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Game = void 0;\nconst board_1 = __webpack_require__(/*! ./board */ \"./src/js-components/board.js\");\nconst bishop_1 = __webpack_require__(/*! ./pieces/bishop */ \"./src/js-components/pieces/bishop.js\");\nconst king_1 = __webpack_require__(/*! ./pieces/king */ \"./src/js-components/pieces/king.js\");\nconst knight_1 = __webpack_require__(/*! ./pieces/knight */ \"./src/js-components/pieces/knight.js\");\nconst piece_1 = __webpack_require__(/*! ./pieces/piece */ \"./src/js-components/pieces/piece.js\");\nconst queen_1 = __webpack_require__(/*! ./pieces/queen */ \"./src/js-components/pieces/queen.js\");\nconst rook_1 = __webpack_require__(/*! ./pieces/rook */ \"./src/js-components/pieces/rook.js\");\nconst pawn_1 = __webpack_require__(/*! ./pieces/pawn */ \"./src/js-components/pieces/pawn.js\");\nconst board_2 = __webpack_require__(/*! ./board */ \"./src/js-components/board.js\");\nconst promotion_1 = __webpack_require__(/*! ./promotion */ \"./src/js-components/promotion.js\");\nconst timer_1 = __webpack_require__(/*! ./timer */ \"./src/js-components/timer.js\");\nconst timeHistoryContainer_1 = __webpack_require__(/*! ./timeHistoryContainer */ \"./src/js-components/timeHistoryContainer.js\");\nconst addMoveHistory_1 = __webpack_require__(/*! ./addMoveHistory */ \"./src/js-components/addMoveHistory.js\");\nclass Game {\n    constructor(time, player1Name, player2Name, target) {\n        this.gameBoard = new board_1.Board;\n        this.gameBoard.drawBoard();\n        this.timeHistory = new timeHistoryContainer_1.timeHistory;\n        this.timeHistory.timeHistoryContainer();\n        //DO SPRAWDZENIA\n        this.lastMove = '';\n        //\n        //bicie\n        Game.beatCounter = 0;\n        //cofanie ruchów\n        Game.moveCounter = true;\n        // Timers:\n        Game.whitePlayerTimer = new timer_1.Timer(time, 'timer-white');\n        Game.blackPlayerTimer = new timer_1.Timer(time, 'timer-black');\n        // Players:\n        Game.player1Name = player1Name;\n        Game.player2Name = player2Name;\n        Game.target = target;\n        //ustawianie figur\n        Game.whiteKing = new king_1.King('white', `${board_2.ID[5]}`, 1);\n        Game.blackKing = new king_1.King('black', `${board_2.ID[5]}`, 8);\n        Game.whites.push(new queen_1.Queen('white', `${board_2.ID[4]}`, 1));\n        Game.whites.push(Game.whiteKing);\n        Game.blacks.push(new queen_1.Queen('black', `${board_2.ID[4]}`, 8));\n        Game.blacks.push(Game.blackKing);\n        for (let i = 3; i <= 6; i += 3) {\n            Game.whites.push(new bishop_1.Bishop('white', `${board_2.ID[i]}`, 1));\n            Game.blacks.push(new bishop_1.Bishop('black', `${board_2.ID[i]}`, 8));\n        }\n        for (let i = 2; i <= 7; i += 5) {\n            Game.whites.push(new knight_1.Knight('white', `${board_2.ID[i]}`, 1));\n            Game.blacks.push(new knight_1.Knight('black', `${board_2.ID[i]}`, 8));\n        }\n        for (let i = 1; i <= 8; i += 7) {\n            Game.whites.push(new rook_1.Rook('white', `${board_2.ID[i]}`, 1));\n            Game.blacks.push(new rook_1.Rook('black', `${board_2.ID[i]}`, 8));\n        }\n        for (let i = 1; i <= 8; i++) {\n            Game.whites.push(new pawn_1.Pawn('white', `${board_2.ID[i]}`, 2));\n            Game.blacks.push(new pawn_1.Pawn('black', `${board_2.ID[i]}`, 7));\n        }\n    }\n    //TURY\n    static changeTurn() {\n        if (Game.round % 2 === 0) {\n            Game.currentPlayer = Game.blacks;\n        }\n        ;\n        if (Game.round % 2 === 1) {\n            Game.currentPlayer = Game.whites;\n        }\n        ;\n        this.round++;\n    }\n    ;\n    static changeTimerTurn() {\n        if (Game.currentPlayer === Game.blacks) {\n            this.blackPlayerTimer.start();\n            this.whitePlayerTimer.pause();\n        }\n        else {\n            this.whitePlayerTimer.start();\n            this.blackPlayerTimer.pause();\n        }\n    }\n    ;\n    static endOfTime() {\n        if (this.whitePlayerTimer.timerHandler.innerHTML === \"00:00\" || this.blackPlayerTimer.timerHandler.innerHTML === \"00:00\") {\n            this.whitePlayerTimer.stop();\n        }\n    }\n    ;\n    static getWhiteTimer() {\n        return this.whitePlayerTimer;\n    }\n    static getBlackTimer() {\n        return this.blackPlayerTimer;\n    }\n    startMove(square) {\n        if (!promotion_1.ifPromotion()) {\n            let chosenPiece = Game.getPiece(square);\n            if (chosenPiece && Game.currentPlayer.includes(chosenPiece)) {\n                Game.setLastChosen(chosenPiece);\n                chosenPiece.move();\n                Game.beatCounter = 0;\n                Game.moveCounter = true;\n            }\n        }\n    }\n    static getPiece(square) {\n        const x = square.id.charAt(0);\n        const y = parseInt(square.id.charAt(2));\n        if (square.innerHTML != '') {\n            for (let p of Game.whites) {\n                if (p.getPositionX() == x && p.getPositionY() == y) {\n                    return p;\n                }\n            }\n            for (let p of Game.blacks) {\n                if (p.getPositionX() == x && p.getPositionY() == y) {\n                    return p;\n                }\n            }\n        }\n        else {\n            return;\n        }\n    }\n    static beat(square) {\n        const x = square.id.charAt(0);\n        const y = parseInt(square.id.charAt(2));\n        let p = Game.getPiece(square);\n        if (p) {\n            if (p.getColor() === 'white') {\n                this.whites.splice(this.whites.indexOf(p), 1);\n                this.beated.push(p);\n                piece_1.Piece.beated.push(p);\n                square.innerHTML = '';\n                Game.beatCounter = 1;\n            }\n            else {\n                this.blacks.splice(this.blacks.indexOf(p), 1);\n                this.beated.push(p);\n                piece_1.Piece.beated.push(p);\n                square.innerHTML = '';\n                Game.beatCounter = 1;\n            }\n        }\n        else {\n            return;\n        }\n    }\n    static checkingKings() {\n        if (Game.whiteKing.isChecked()) {\n            if (Game.whiteKing.isCheckmated()) {\n                console.log('WHITE KING CHECKMATED');\n            }\n            else {\n                console.log('WHITE KING CHECKED');\n                if (document.documentElement.lang === 'en') {\n                    addMoveHistory_1.addMoveHistory(`White king is checked`, '');\n                }\n                else {\n                    addMoveHistory_1.addMoveHistory('Szach na białym królu', '');\n                }\n            }\n        }\n        if (Game.blackKing.isChecked()) {\n            if (Game.blackKing.isCheckmated()) {\n                console.log('BLACK KING CHECKMATED');\n            }\n            else {\n                console.log('BLACK KING CHECKED');\n                if (document.documentElement.lang === 'en') {\n                    addMoveHistory_1.addMoveHistory(`Black king is checked`, '');\n                }\n                else {\n                    addMoveHistory_1.addMoveHistory('Szach na czarnym królu', '');\n                }\n            }\n        }\n    }\n    static isQueensideCastlingPossible() {\n        if (Game.lastChosen.getColor() === 'white') {\n            for (let p of Game.whites) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'A' && p.getPositionY() === 1) {\n                    return (!Game.whiteKing.hasMoved\n                        && !p.hasMoved\n                        && document.querySelector('#B-1').innerHTML === ''\n                        && document.querySelector('#C-1').innerHTML === ''\n                        && document.querySelector('#D-1').innerHTML === ''\n                        && !this.whiteKing.isChecked()\n                        && this.whiteKing.getDangerZones().indexOf('C-1') === -1);\n                }\n            }\n        }\n        else {\n            for (let p of Game.blacks) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'A' && p.getPositionY() === 8) {\n                    return (!Game.blackKing.hasMoved\n                        && !p.hasMoved\n                        && document.querySelector('#B-8').innerHTML === ''\n                        && document.querySelector('#C-8').innerHTML === ''\n                        && document.querySelector('#D-8').innerHTML === ''\n                        && !this.blackKing.isChecked()\n                        && this.blackKing.getDangerZones().indexOf('C-8') === -1);\n                }\n            }\n        }\n        return false;\n    }\n    static isKingsideCastlingPossible() {\n        if (Game.lastChosen.getColor() === 'white') {\n            for (let p of Game.whites) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'H' && p.getPositionY() === 1) {\n                    return (!Game.whiteKing.hasMoved\n                        && !p.hasMoved\n                        && document.querySelector('#F-1').innerHTML === ''\n                        && document.querySelector('#G-1').innerHTML === ''\n                        && !this.whiteKing.isChecked()\n                        && this.whiteKing.getDangerZones().indexOf('G-1') === -1);\n                }\n            }\n        }\n        else {\n            for (let p of Game.blacks) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'H' && p.getPositionY() === 8) {\n                    return (!Game.blackKing.hasMoved\n                        && !p.hasMoved\n                        && document.querySelector('#F-8').innerHTML === ''\n                        && document.querySelector('#G-8').innerHTML === ''\n                        && !this.blackKing.isChecked()\n                        && this.blackKing.getDangerZones().indexOf('G-8') === -1);\n                }\n            }\n        }\n        return false;\n    }\n    //COFANIE RUCHÓW\n    static reverseMove() {\n        Game.getLastChosen().reverseLastMove(Game.getLastChosen().color);\n        //to wyzej działa bez argumentu\n        //działa\n        if (Game.beatCounter === 1) {\n            piece_1.Piece.retLast();\n            Game.changeTurn();\n            // Game.changeTimerTurn();\n            Game.beatCounter = 0;\n        }\n        Game.changeTimerTurn();\n    }\n    static getPieces(color) {\n        if (color == 'white') {\n            return this.whites;\n        }\n        return this.blacks;\n    }\n    static setLastChosen(piece) {\n        Game.lastChosen = piece;\n    }\n    static getWhites() {\n        return Game.whites;\n    }\n    static getBlacks() {\n        return Game.blacks;\n    }\n    static getWhiteKing() {\n        return Game.whiteKing;\n    }\n    static getBlackKing() {\n        return Game.blackKing;\n    }\n    static getLastChosen() {\n        return Game.lastChosen;\n    }\n}\nexports.Game = Game;\nGame.whites = [];\nGame.blacks = [];\nGame.beated = [];\nGame.currentPlayer = Game.whites;\nGame.round = 0;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/game.js?");

/***/ }),

/***/ "./src/js-components/pieces/bishop.js":
/*!********************************************!*\
  !*** ./src/js-components/pieces/bishop.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bishop = void 0;\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst board_1 = __webpack_require__(/*! ../board */ \"./src/js-components/board.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\n//goniec / laufer\nclass Bishop extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.symbol = `./../../../Projekt3-chess/static/assets/${this.color}Bishop.png`;\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        //this.removeClassActive();\n        const possibleMoves = [];\n        const coordinateX = Object.values(board_1.ID).indexOf(this.positionX) + 1;\n        const coordinateY = this.positionY;\n        // move by first diagonal\n        // top right\n        var topRight;\n        if (9 - coordinateX < 9 - coordinateY) {\n            topRight = 9 - coordinateX;\n        }\n        else {\n            topRight = 9 - coordinateY;\n        }\n        for (let i = 1; i < topRight; i++) {\n            if (document.getElementById(`${board_1.ID[coordinateX + i]}-${coordinateY + i}`).classList.contains('pieceInside')) {\n                if (!(document.getElementById(`${board_1.ID[coordinateX + i]}-${coordinateY + i}`).getElementsByTagName(\"img\")[0].classList.contains(`${this.color}`))) {\n                    possibleMoves.push(`${board_1.ID[coordinateX + i]}-${coordinateY + i}`);\n                }\n                ;\n                break;\n            }\n            else {\n                possibleMoves.push(`${board_1.ID[coordinateX + i]}-${coordinateY + i}`);\n            }\n        }\n        // down left\n        var downLeft;\n        if (coordinateY - 1 < coordinateX - 1) {\n            downLeft = coordinateY;\n        }\n        else {\n            downLeft = coordinateX;\n        }\n        for (let i = 1; i < downLeft; i++) {\n            if (document.getElementById(`${board_1.ID[coordinateX - i]}-${coordinateY - i}`).classList.contains('pieceInside')) {\n                if (!(document.getElementById(`${board_1.ID[coordinateX - i]}-${coordinateY - i}`).getElementsByTagName(\"img\")[0].classList.contains(`${this.color}`))) {\n                    possibleMoves.push(`${board_1.ID[coordinateX - i]}-${coordinateY - i}`);\n                }\n                ;\n                break;\n            }\n            else {\n                possibleMoves.push(`${board_1.ID[coordinateX - i]}-${coordinateY - i}`);\n            }\n        }\n        // move by second diagonal\n        // top left\n        var topLeft;\n        if (coordinateX < 9 - coordinateY) {\n            topLeft = coordinateX;\n        }\n        else {\n            topLeft = 9 - coordinateY;\n        }\n        for (let i = 1; i < topLeft; i++) {\n            if (document.getElementById(`${board_1.ID[coordinateX - i]}-${coordinateY + i}`).classList.contains('pieceInside')) {\n                if (!(document.getElementById(`${board_1.ID[coordinateX - i]}-${coordinateY + i}`).getElementsByTagName(\"img\")[0].classList.contains(`${this.color}`))) {\n                    possibleMoves.push(`${board_1.ID[coordinateX - i]}-${coordinateY + i}`);\n                }\n                ;\n                break;\n            }\n            else {\n                possibleMoves.push(`${board_1.ID[coordinateX - i]}-${coordinateY + i}`);\n            }\n        }\n        // down right\n        var downRight;\n        if (coordinateY < 9 - coordinateX) {\n            downRight = coordinateY;\n        }\n        else {\n            downRight = 9 - coordinateX;\n        }\n        for (let i = 1; i < downRight; i++) {\n            if (document.getElementById(`${board_1.ID[coordinateX + i]}-${coordinateY - i}`).classList.contains('pieceInside')) {\n                if (!(document.getElementById(`${board_1.ID[coordinateX + i]}-${coordinateY - i}`).getElementsByTagName(\"img\")[0].classList.contains(`${this.color}`))) {\n                    possibleMoves.push(`${board_1.ID[coordinateX + i]}-${coordinateY - i}`);\n                }\n                ;\n                break;\n            }\n            else {\n                possibleMoves.push(`${board_1.ID[coordinateX + i]}-${coordinateY - i}`);\n            }\n        }\n        return possibleMoves;\n    }\n    move() {\n        this.removeClassActive();\n        let possibleMovesArr = this.showPossibleMoves();\n        // console.log(possibleMovesArr);\n        possibleMovesArr = this.defendKing(possibleMovesArr);\n        possibleMovesArr.forEach(id => {\n            const square = document.querySelector(`#${id}`);\n            square.classList.add('active'); //<--oznaczenie wizualne na szachownicy\n            square.addEventListener('click', () => {\n                if (square.classList.contains('active') && (game_1.Game.getLastChosen() === this)) {\n                    if (square.innerHTML != '') {\n                        game_1.Game.beat(square);\n                    }\n                    //ZBIERANIE HISTORII RUCHÓW\n                    this.history(square);\n                    this.historyNotation();\n                    //\n                    this.setOnBoard(square.id.charAt(0), parseInt(square.id.charAt(2))); //<-- przeniesienie figury po kliknięciu\n                    this.removeClassActive();\n                    game_1.Game.checkingKings();\n                    game_1.Game.changeTimerTurn();\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                }\n            }, { capture: true });\n        });\n    }\n}\nexports.Bishop = Bishop;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/bishop.js?");

/***/ }),

/***/ "./src/js-components/pieces/king.js":
/*!******************************************!*\
  !*** ./src/js-components/pieces/king.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.King = void 0;\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst pawn_1 = __webpack_require__(/*! ./pawn */ \"./src/js-components/pieces/pawn.js\");\nconst rook_1 = __webpack_require__(/*! ./rook */ \"./src/js-components/pieces/rook.js\");\nconst addMoveHistory_1 = __webpack_require__(/*! ../addMoveHistory */ \"./src/js-components/addMoveHistory.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\nclass King extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.hasMoved = false;\n        this.symbol = `./../../../Projekt3-chess/static/assets/${this.color}King.png`; //<-- w przyszłości bedzie tu ścieżka do img figury\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        const possibleMoves = [];\n        const arrayOfX = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        const indexOfX = arrayOfX.indexOf(this.getPositionX());\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                const square = document.querySelector(`#${arrayOfX[indexOfX + i]}-${this.getPositionY() + j}`);\n                if (square !== null) {\n                    if (square.innerHTML === '')\n                        possibleMoves.push(`${arrayOfX[indexOfX + i]}-${this.getPositionY() + j}`);\n                    else if (!square.querySelector('img').classList.contains(this.color)) {\n                        possibleMoves.push(`${arrayOfX[indexOfX + i]}-${this.getPositionY() + j}`);\n                    }\n                }\n            }\n        }\n        return possibleMoves;\n    }\n    move() {\n        this.removeClassActive();\n        let possibleMovesArr = this.showPossibleMoves();\n        const dangerZones = this.getDangerZones();\n        possibleMovesArr = this.defendKing(possibleMovesArr);\n        if (game_1.Game.isQueensideCastlingPossible())\n            this.queensideCastling();\n        if (game_1.Game.isKingsideCastlingPossible())\n            this.kingsideCastling();\n        possibleMovesArr.forEach(id => {\n            const square = document.querySelector(`#${id}`);\n            if (dangerZones.indexOf(`${square.id.charAt(0)}-${parseInt(square.id.charAt(2))}`) !== -1) {\n                return;\n            }\n            // if(square!.innerHTML !== '' && !this.isPositonSafe(square!.id.charAt(0), parseInt(square!.id.charAt(2)))){\n            //     return;\n            // }\n            square.classList.add('active'); //<--oznaczenie wizualne na szachownicy\n            square.addEventListener('click', () => {\n                if (square.classList.contains('active') && (game_1.Game.getLastChosen() === this)) {\n                    if (square.innerHTML != '') {\n                        game_1.Game.beat(square);\n                    }\n                    //ZBIERANIE HISTORII RUCHÓW\n                    this.history(square);\n                    this.historyNotation();\n                    //\n                    this.setOnBoard(square.id.charAt(0), parseInt(square.id.charAt(2))); //<-- przeniesienie figury po kliknięciu\n                    this.hasMoved = true;\n                    this.removeClassActive();\n                    game_1.Game.changeTimerTurn();\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                }\n            }, { capture: true });\n        });\n    }\n    queensideCastling() {\n        if (this.color === 'white') {\n            const position = document.querySelector('#C-1');\n            position.classList.add('active');\n            //console.log('nadalem klase active na skrzydle hetmanskim')\n            console.log(document.querySelector('#C-1'));\n            let rook;\n            for (let p of game_1.Game.getWhites()) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'A' && p.getPositionY() === 1)\n                    rook = p;\n            }\n            position.addEventListener('click', () => {\n                if (game_1.Game.getLastChosen() === this) {\n                    this.setOnBoard('C', 1);\n                    rook.setOnBoard('D', 1);\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory('Queen side castling', this.color);\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory('Roszada hetmańska', 'Biały');\n                    }\n                    this.removeClassActive();\n                    game_1.Game.changeTurn();\n                    game_1.Game.changeTimerTurn();\n                }\n            });\n        }\n        else {\n            const position = document.querySelector('#C-8');\n            position.classList.add('active');\n            let rook;\n            for (let p of game_1.Game.getBlacks()) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'A' && p.getPositionY() === 8) {\n                    rook = p;\n                }\n            }\n            position.addEventListener('click', () => {\n                if (game_1.Game.getLastChosen() === this) {\n                    this.setOnBoard('C', 8);\n                    rook.setOnBoard('D', 8);\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory('Queen side castling', this.color);\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory('Roszada hetmańska', 'Czarny');\n                    }\n                    this.removeClassActive();\n                    game_1.Game.changeTurn();\n                    game_1.Game.changeTimerTurn();\n                }\n            });\n        }\n    }\n    kingsideCastling() {\n        if (this.color === 'white') {\n            const position = document.querySelector('#G-1');\n            position.classList.add('active');\n            //console.log('nadalem klase active na skrzydle krolweskim')\n            console.log(document.querySelector('#G-1'));\n            let rook;\n            for (let p of game_1.Game.getWhites()) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'H' && p.getPositionY() === 1)\n                    rook = p;\n            }\n            position.addEventListener('click', () => {\n                if (game_1.Game.getLastChosen() === this) {\n                    this.setOnBoard('G', 1);\n                    rook.setOnBoard('F', 1);\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory('King side castling', this.color);\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory('Roszada na skrzydle królewskim', 'Biały');\n                    }\n                    this.removeClassActive();\n                    game_1.Game.changeTurn();\n                    game_1.Game.changeTimerTurn();\n                }\n            });\n        }\n        else {\n            const position = document.querySelector('#G-8');\n            position.classList.add('active');\n            let rook;\n            for (let p of game_1.Game.getBlacks()) {\n                if (p instanceof rook_1.Rook && p.getPositionX() === 'H' && p.getPositionY() === 8)\n                    rook = p;\n            }\n            position.addEventListener('click', () => {\n                if (game_1.Game.getLastChosen() === this) {\n                    this.setOnBoard('G', 8);\n                    rook.setOnBoard('F', 8);\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory('King side castling', this.color);\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory('Roszada na skrzydle królewskim', 'Czarny');\n                    }\n                    this.removeClassActive();\n                    game_1.Game.changeTurn();\n                    game_1.Game.changeTimerTurn();\n                }\n            });\n        }\n    }\n    isChecked() {\n        if (this.getDangerZones().indexOf(`${this.positionX}-${this.positionY}`) !== -1) {\n            return true;\n        }\n        else\n            return false;\n    }\n    isKingCheckedByThisPiece(piece) {\n        let moves = piece.showPossibleMoves();\n        if (moves.indexOf(`${this.positionX}-${this.positionY}`) !== -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    isCheckmated() {\n        //const possibleMovesArr = this.showPossibleMoves().filter(id => {\n        //    const dangerArr = this.getDangerZones();\n        //    return (dangerArr.indexOf(id) === -1);\n        //});\n        //return (this.isChecked() && possibleMovesArr.length === 0);\n        const possMoves = [];\n        for (let p of (this.color === 'white' ? game_1.Game.getWhites() : game_1.Game.getBlacks())) {\n            p.defendKing(p.showPossibleMoves()).forEach(id => possMoves.push(id));\n        }\n        if (this.isChecked() && possMoves.length === 0) {\n            return true;\n        }\n        return false;\n    }\n    areAllPossibleMovesInDangerZones() {\n        const possibleMoves = this.showPossibleMoves();\n        const dangerZones = this.getDangerZones();\n        let dangerZonesCounter = 0;\n        if (possibleMoves.length > 0) {\n            possibleMoves.forEach(move => {\n                if (dangerZones.includes(move)) {\n                    dangerZonesCounter += 1;\n                }\n            });\n            if (dangerZonesCounter === possibleMoves.length) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        return false;\n    }\n    isPositonSafe(posX, posY) {\n        let safe;\n        const square = document.querySelector(`#${posX}-${posY}`);\n        let originalPiece;\n        for (let p of (square.querySelector('img').classList.contains('white') ? game_1.Game.getWhites() : game_1.Game.getBlacks())) {\n            if (p.getPositionX() === posX && p.getPositionY() === posY) {\n                originalPiece = p;\n            }\n        }\n        const originalPieceX = originalPiece.getPositionX();\n        const originalPieceY = originalPiece.getPositionY();\n        const originalKingX = this.positionX;\n        const originalKingY = this.positionY;\n        const tempPositions = Array.from(document.querySelectorAll('.board-container div')).filter(square => {\n            return (square.innerHTML == '');\n        });\n        const tempPieceX = tempPositions[0].id.charAt(0);\n        const tempPieceY = parseFloat(tempPositions[0].id.charAt(2));\n        //console.log(originalPiece!);\n        //console.log(tempPieceX, tempPieceY);\n        originalPiece.setOnBoard(tempPieceX, tempPieceY);\n        game_1.Game.changeTurn();\n        console.log(originalPiece);\n        this.setOnBoard(originalPieceX, originalPieceY);\n        if (this.isChecked()) {\n            safe = false;\n        }\n        else {\n            safe = true;\n        }\n        this.setOnBoard(originalKingX, originalKingY);\n        game_1.Game.changeTurn;\n        originalPiece.setOnBoard(originalPieceX, originalPieceY);\n        game_1.Game.changeTurn();\n        return safe;\n    }\n    getDangerZones() {\n        const dangerArr = [];\n        if (this.color === 'white') {\n            for (let p of game_1.Game.getBlacks()) {\n                if (!(p instanceof pawn_1.Pawn)) {\n                    const possibleOpponentMoves = p.showPossibleMoves();\n                    possibleOpponentMoves.forEach(id => {\n                        dangerArr.push(id);\n                    });\n                }\n                else {\n                    const possiblePawnAttacks = p.getAttacks();\n                    possiblePawnAttacks.forEach(attack => dangerArr.push(attack));\n                }\n            }\n        }\n        else {\n            for (let p of game_1.Game.getWhites()) {\n                if (!(p instanceof pawn_1.Pawn)) {\n                    const possibleOpponentMoves = p.showPossibleMoves();\n                    possibleOpponentMoves.forEach(id => {\n                        dangerArr.push(id);\n                    });\n                }\n                else {\n                    const possiblePawnAttacks = p.getAttacks();\n                    possiblePawnAttacks.forEach(attack => dangerArr.push(attack));\n                }\n            }\n        }\n        return dangerArr;\n    }\n    allPossibleMoves() {\n        const allMoves = [];\n        if (this.color === 'white') {\n            for (let p of game_1.Game.getWhites()) {\n                if (!(p instanceof pawn_1.Pawn)) {\n                    if (!(p instanceof King)) {\n                        const possibleMoves = p.showPossibleMoves();\n                        possibleMoves.forEach(id => {\n                            allMoves.push(id);\n                        });\n                    }\n                }\n                else {\n                    const possiblePawnAttacks = p.getAttacks();\n                    possiblePawnAttacks.forEach(attack => allMoves.push(attack));\n                }\n            }\n        }\n        else {\n            for (let p of game_1.Game.getBlacks()) {\n                if (!(p instanceof pawn_1.Pawn)) {\n                    if (!(p instanceof King)) {\n                        const possibleMoves = p.showPossibleMoves();\n                        possibleMoves.forEach(id => {\n                            allMoves.push(id);\n                        });\n                    }\n                }\n                else {\n                    const possiblePawnAttacks = p.getAttacks();\n                    possiblePawnAttacks.forEach(attack => allMoves.push(attack));\n                }\n            }\n        }\n        return allMoves.length;\n    }\n}\nexports.King = King;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/king.js?");

/***/ }),

/***/ "./src/js-components/pieces/knight.js":
/*!********************************************!*\
  !*** ./src/js-components/pieces/knight.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Knight = void 0;\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst board_1 = __webpack_require__(/*! ../board */ \"./src/js-components/board.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\n//skoczek / koń\nclass Knight extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.symbol = `./../../../Projekt3-chess/static/assets/${this.color}Knight.png`;\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        //this.removeClassActive();\n        const allPossibleIds = []; // przechowuje wszystkie możliwe ID - łącznie z tymi na których stoją inne figury - przyda się do spr. czy stoją figury innego koloru i zbijania\n        this.possibleMovesIDs = []; // tu trafiają tylko możliwe ruchy figury\n        const coordinateX = Object.values(board_1.ID).indexOf(this.positionX) + 1;\n        const coordinateY = this.positionY;\n        // wypłenienie tablicy wszystkimi możliwymi ruchami - bez sprawdzenia czy stoją na polach inne bierki\n        for (let i = coordinateX - 2; i <= coordinateX + 2; i += 4) {\n            if (i >= 1 && i <= 8) {\n                for (let j = coordinateY - 1; j <= coordinateY + 1; j += 2) {\n                    if (j >= 1 && j <= 8) {\n                        allPossibleIds.push(`${board_1.ID[i]}-${j}`);\n                    }\n                }\n            }\n        }\n        for (let i = coordinateY - 2; i <= coordinateY + 2; i += 4) {\n            if (i >= 1 && i <= 8) {\n                for (let j = coordinateX - 1; j <= coordinateX + 1; j += 2) {\n                    if (j >= 1 && j <= 8) {\n                        allPossibleIds.push(`${board_1.ID[j]}-${i}`);\n                    }\n                }\n            }\n        }\n        // Sprawdzenie czy na polu nie stoi żadna figura lub czy figura ma taki kolor jak atakująca, jesli nie to dodaję ID do właściwej - zwracanej tablicy.\n        allPossibleIds.forEach((id) => {\n            if (!(document.querySelector(`#${id}`).querySelector('img')?.classList.contains(`${this.color}`)) || document.querySelector(`#${id}`).innerHTML == '') {\n                this.possibleMovesIDs.push(id);\n            }\n        });\n        return this.possibleMovesIDs;\n    }\n    move() {\n        this.removeClassActive();\n        let possibilities = this.showPossibleMoves();\n        //console.log(possibilities);\n        possibilities = this.defendKing(possibilities);\n        //console.log(possibilities);\n        possibilities.forEach((id) => {\n            document.querySelector(`#${id}`).classList.add('active');\n        });\n        //adding event listener to each field with active class to perform a figure's move after click\n        document.querySelectorAll('.active').forEach((possMove) => {\n            possMove.addEventListener('click', () => {\n                const coorX = possMove.id.charAt(0);\n                const coorY = parseInt(possMove.id.charAt(2));\n                if (possMove.classList.contains('active') && (game_1.Game.getLastChosen() === this)) {\n                    if (possMove.innerHTML != '') {\n                        game_1.Game.beat(possMove);\n                    }\n                    //ZBIERANIE HISTORII RUCHÓW\n                    this.history(possMove);\n                    this.historyNotation();\n                    //\n                    this.setOnBoard(coorX, coorY);\n                    this.removeClassActive();\n                    game_1.Game.checkingKings();\n                    game_1.Game.changeTimerTurn();\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                    //console.log(possMove.innerHTML);\n                }\n            }, { capture: true });\n        });\n    }\n}\nexports.Knight = Knight;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/knight.js?");

/***/ }),

/***/ "./src/js-components/pieces/pawn.js":
/*!******************************************!*\
  !*** ./src/js-components/pieces/pawn.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Pawn = void 0;\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst queen_1 = __webpack_require__(/*! ./queen */ \"./src/js-components/pieces/queen.js\");\nconst knight_1 = __webpack_require__(/*! ./knight */ \"./src/js-components/pieces/knight.js\");\nconst rook_1 = __webpack_require__(/*! ./rook */ \"./src/js-components/pieces/rook.js\");\nconst bishop_1 = __webpack_require__(/*! ./bishop */ \"./src/js-components/pieces/bishop.js\");\nconst addMoveHistory_1 = __webpack_require__(/*! ../addMoveHistory */ \"./src/js-components/addMoveHistory.js\");\nconst translateFunc_1 = __webpack_require__(/*! ../translateFunc */ \"./src/js-components/translateFunc.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\n//pion\nclass Pawn extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.symbol = `../../../../Projekt3-chess/static/assets/${this.color}Pawn.png`;\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        //this.removeClassActive();\n        let posXAttack1 = this.nextChar(this.positionX);\n        let posXAttack2 = this.previousChar(this.positionX);\n        let possibleMovesIds = [];\n        let possibleAttackMovesIds = [];\n        let possibleEnPassant = [];\n        if (this.color === 'white') {\n            let positionY1 = this.positionY + 1;\n            let positionY2 = document.getElementById(`${this.positionX}-${positionY1}`);\n            let positionY3 = this.positionY + 2;\n            let positionY4 = document.getElementById(`${this.positionX}-${positionY3}`);\n            let attack1 = document.getElementById(`${posXAttack1}-${positionY1}`);\n            let attack2 = document.getElementById(`${posXAttack2}-${positionY1}`);\n            // ATTACK\n            if (attack1 !== null) {\n                if (attack1.classList.contains('pieceInside') && !(attack1.querySelector('img').classList.contains(`${this.color}`))) {\n                    possibleAttackMovesIds.push(`${posXAttack1}-${positionY1}`);\n                }\n            }\n            if (attack2 !== null) {\n                if (attack2.classList.contains('pieceInside') && !(attack2.querySelector('img').classList.contains(`${this.color}`))) {\n                    possibleAttackMovesIds.push(`${posXAttack2}-${positionY1}`);\n                }\n            }\n            // MOVES\n            if (this.positionY === 2 && !(positionY2.matches('.pieceInside')) && !(positionY4.matches('.pieceInside'))) {\n                for (let i = 3; i < 5; i++) {\n                    possibleMovesIds.push(`${this.positionX}-${i}`);\n                }\n            }\n            else if (!(positionY2.matches('.pieceInside'))) {\n                possibleMovesIds.push(`${this.positionX}-${positionY1}`);\n            }\n        }\n        else {\n            let positionY1 = this.positionY - 1;\n            let positionY2 = document.getElementById(`${this.positionX}-${positionY1}`);\n            let attack1 = document.getElementById(`${posXAttack1}-${positionY1}`);\n            let attack2 = document.getElementById(`${posXAttack2}-${positionY1}`);\n            let positionY3 = this.positionY - 2;\n            let positionY4 = document.getElementById(`${this.positionX}-${positionY3}`);\n            // ATTACK\n            if (attack1 !== null) {\n                if (attack1.classList.contains('pieceInside') && !(attack1.querySelector('img').classList.contains(`${this.color}`))) {\n                    possibleAttackMovesIds.push(`${posXAttack1}-${positionY1}`);\n                }\n            }\n            if (attack2 !== null) {\n                if (attack2.classList.contains('pieceInside') && !(attack2.querySelector('img').classList.contains(`${this.color}`))) {\n                    possibleAttackMovesIds.push(`${posXAttack2}-${positionY1}`);\n                }\n            }\n            // MOVES\n            if (this.positionY === 7 && !(positionY2.matches('.pieceInside')) && !(positionY4.matches('.pieceInside'))) {\n                for (let i = 6; i > 4; i--) {\n                    possibleMovesIds.push(`${this.positionX}-${i}`);\n                }\n            }\n            else if (!(positionY2.matches('.pieceInside'))) {\n                possibleMovesIds.push(`${this.positionX}-${positionY1}`);\n            }\n        }\n        let allPossibleMovesIds = possibleMovesIds.concat(possibleAttackMovesIds).concat(possibleEnPassant);\n        return allPossibleMovesIds;\n    }\n    getAttacks() {\n        const attacksArr = [];\n        const arrayOfX = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        const indexOfX = arrayOfX.indexOf(this.getPositionX());\n        if (this.color === 'white') {\n            const upLeft = document.querySelector(`#${arrayOfX[indexOfX - 1]}-${this.positionY + 1}`);\n            const upRight = document.querySelector(`#${arrayOfX[indexOfX + 1]}-${this.positionY + 1}`);\n            if (upLeft !== null)\n                attacksArr.push(`${arrayOfX[indexOfX - 1]}-${this.positionY + 1}`);\n            if (upRight !== null)\n                attacksArr.push(`${arrayOfX[indexOfX + 1]}-${this.positionY + 1}`);\n        }\n        else {\n            const downLeft = document.querySelector(`#${arrayOfX[indexOfX - 1]}-${this.positionY - 1}`);\n            const downRight = document.querySelector(`#${arrayOfX[indexOfX + 1]}-${this.positionY - 1}`);\n            if (downLeft !== null)\n                attacksArr.push(`${arrayOfX[indexOfX - 1]}-${this.positionY - 1}`);\n            if (downRight !== null)\n                attacksArr.push(`${arrayOfX[indexOfX + 1]}-${this.positionY - 1}`);\n        }\n        return attacksArr;\n    }\n    move() {\n        this.removeClassActive();\n        const showEnPassant = this.enPassant();\n        let possibilities = this.showPossibleMoves();\n        possibilities = this.defendKing(possibilities);\n        possibilities.forEach((id) => {\n            document.querySelector(`#${id}`).classList.add('active');\n        });\n        showEnPassant.forEach((id) => {\n            document.querySelector(`#${id}`).classList.add('active');\n            document.querySelector(`#${id}`).classList.add('en-pass');\n        });\n        //adding event listener to each field with active class to perform a figure's move after click\n        document.querySelectorAll('.active').forEach((possMove) => {\n            possMove.addEventListener('click', () => {\n                const coorX = possMove.id.charAt(0);\n                const coorY = parseInt(possMove.id.charAt(2));\n                const enPass1 = document.getElementById(`${coorX}-${(coorY - 1)}`);\n                const enPass2 = document.getElementById(`${coorX}-${(coorY + 1)}`);\n                if (possMove.classList.contains('active') && (game_1.Game.getLastChosen() === this)) {\n                    if (possMove.innerHTML != '') {\n                        game_1.Game.beat(possMove);\n                    }\n                    if (possMove.classList.contains('en-pass')) {\n                        if (this.color === 'white') {\n                            game_1.Game.beat(enPass1);\n                            possMove.classList.remove('en-pass');\n                            enPass1.classList.remove('pieceInside');\n                            //BICIE W PRZELOCIE\n                        }\n                        else {\n                            game_1.Game.beat(enPass2);\n                            possMove.classList.remove('en-pass');\n                            enPass2.classList.remove('pieceInside');\n                            //BICIE W PRZELOCIE\n                        }\n                    }\n                    this.history(possMove);\n                    this.historyNotation();\n                    this.setOnBoard(coorX, coorY);\n                    this.removeClassActive();\n                    game_1.Game.checkingKings();\n                    game_1.Game.changeTimerTurn();\n                    if (this.color === 'white' && this.positionY === 8 && this.parentSquare.querySelector('img').src.includes('Pawn')) {\n                        game_1.Game.blackPlayerTimer.pause();\n                        this.parentSquare.appendChild(this.pawnPromotion(this));\n                        this.parentSquare.classList.add('promotion');\n                    }\n                    else if (this.positionY === 1 && this.parentSquare.querySelector('img').src.includes('Pawn')) {\n                        game_1.Game.whitePlayerTimer.pause();\n                        this.parentSquare.appendChild(this.pawnPromotion(this));\n                        this.parentSquare.classList.add('promotion');\n                    }\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                }\n            }, { capture: true });\n        });\n    }\n    nextChar(posXRight) {\n        return String.fromCharCode(posXRight.charCodeAt(0) + 1);\n    }\n    previousChar(posXRight) {\n        return String.fromCharCode(posXRight.charCodeAt(0) - 1);\n    }\n    // promotion\n    pawnPromotion(pawn) {\n        this.removeClassActive();\n        const pieces = [\n            { pieceName: queen_1.Queen, name: \"Queen\" },\n            { pieceName: rook_1.Rook, name: \"Rook\" },\n            { pieceName: knight_1.Knight, name: \"Knight\" },\n            { pieceName: bishop_1.Bishop, name: \"Bishop\" }\n        ];\n        const modalWindowPawn = document.createElement(\"div\");\n        if (this.color === 'white') {\n            modalWindowPawn.className = \"modal-window-white\";\n            for (const piece of pieces) {\n                const selectableFigure = document.createElement(\"img\");\n                selectableFigure.setAttribute('src', `../../../../Projekt3-chess/static/assets/white${piece.name}.png`);\n                const { pieceName: PieceName } = piece;\n                modalWindowPawn.appendChild(selectableFigure);\n                selectableFigure.addEventListener('click', () => {\n                    document.querySelector(`#${pawn.getPositionX()}-8`).removeChild(modalWindowPawn);\n                    const pieceToCreate = new PieceName('white', `${pawn.getPositionX()}`, 8);\n                    let whites = game_1.Game.getWhites();\n                    whites.push(pieceToCreate);\n                    this.parentSquare.classList.remove('promotion');\n                    const pawnToRemove = whites.indexOf(pawn);\n                    whites.splice(pawnToRemove, 1);\n                    game_1.Game.changeTurn();\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory(`Pawn promotion to ${pieceToCreate.constructor.name}`, '');\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory(`Promocja piona na ${translateFunc_1.getName(pieceToCreate.constructor.name)}`, '');\n                    }\n                    ;\n                    game_1.Game.blackPlayerTimer.start();\n                });\n            }\n        }\n        else {\n            modalWindowPawn.className = \"modal-window-black\";\n            for (const piece of pieces) {\n                const selectableFigure = document.createElement(\"img\");\n                selectableFigure.setAttribute('src', `../../../../Projekt3-chess/static/assets/black${piece.name}.png`);\n                selectableFigure.style.height = '80px';\n                const { pieceName: PieceName } = piece;\n                modalWindowPawn.appendChild(selectableFigure);\n                selectableFigure.addEventListener('click', () => {\n                    document.querySelector(`#${pawn.getPositionX()}-1`).removeChild(modalWindowPawn);\n                    const pieceToCreate = new PieceName('black', `${pawn.getPositionX()}`, 1);\n                    let blacks = game_1.Game.getBlacks();\n                    blacks.push(pieceToCreate);\n                    this.parentSquare.classList.remove('promotion');\n                    const pawnToRemove = blacks.indexOf(pawn);\n                    blacks.splice(pawnToRemove, 1);\n                    game_1.Game.changeTurn();\n                    if (document.documentElement.lang === 'en') {\n                        addMoveHistory_1.addMoveHistory(`Pawn promotion to ${pieceToCreate.constructor.name}`, '');\n                    }\n                    else {\n                        addMoveHistory_1.addMoveHistory(`Promocja piona na ${translateFunc_1.getName(pieceToCreate.constructor.name)}`, '');\n                    }\n                    game_1.Game.whitePlayerTimer.start();\n                });\n            }\n        }\n        return modalWindowPawn;\n    }\n    ;\n    //en passant\n    enPassant() {\n        let pawnPosX1 = this.nextChar(this.positionX);\n        let pawnPos1 = document.getElementById(`${pawnPosX1}-${this.positionY}`);\n        let pawnPosX2 = this.previousChar(this.positionX);\n        let pawnPos2 = document.getElementById(`${pawnPosX2}-${this.positionY}`);\n        let positionY1 = this.positionY + 1;\n        let positionY2 = this.positionY - 1;\n        const enPassant = [];\n        const lastMoveArray = piece_1.Piece.movesHistory.slice();\n        const lastMovePawn = lastMoveArray.pop();\n        if (lastMovePawn) {\n            const differenceY = Math.abs(parseInt(lastMovePawn[1]) - parseInt(lastMovePawn[3]));\n            const lastX = lastMovePawn[0];\n            if (pawnPos1 !== null && pawnPos2 !== null) {\n                if (this.color === 'white'\n                    && this.positionY === 5\n                    && (pawnPos1.querySelector('img')?.src.includes('Pawn') || pawnPos2.querySelector('img')?.src.includes('Pawn'))\n                    && differenceY === 2) {\n                    if (pawnPos1.querySelector('img')?.src.includes('Pawn') && lastX === pawnPosX1) {\n                        enPassant.push(`${pawnPosX1}-${positionY1}`);\n                    }\n                    else if (pawnPos2.querySelector('img')?.src.includes('Pawn')) {\n                        enPassant.push(`${pawnPosX2}-${positionY1}`);\n                    }\n                }\n            }\n            if (pawnPos1 !== null && pawnPos2 !== null) {\n                if (this.color === 'black'\n                    && this.positionY === 4\n                    && (pawnPos1.querySelector('img')?.src.includes('Pawn') || pawnPos2.querySelector('img')?.src.includes('Pawn'))\n                    && differenceY === 2) {\n                    if (pawnPos1.querySelector('img')?.src.includes('Pawn') && lastX === pawnPosX1) {\n                        enPassant.push(`${pawnPosX1}-${positionY2}`);\n                    }\n                    else {\n                        enPassant.push(`${pawnPosX2}-${positionY2}`);\n                    }\n                }\n            }\n        }\n        return enPassant;\n    }\n}\nexports.Pawn = Pawn;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/pawn.js?");

/***/ }),

/***/ "./src/js-components/pieces/piece.js":
/*!*******************************************!*\
  !*** ./src/js-components/pieces/piece.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Piece = void 0;\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst addMoveHistory_1 = __webpack_require__(/*! ../addMoveHistory */ \"./src/js-components/addMoveHistory.js\");\nconst translateFunc_1 = __webpack_require__(/*! ../translateFunc */ \"./src/js-components/translateFunc.js\");\nclass Piece {\n    constructor(color, positionX, positionY) {\n        this.symbol = ''; //<-- domyślnie ustawiłem puste, bo każda figura ma inny symbol\n        this.color = color;\n        this.positionX = positionX;\n        this.positionY = positionY;\n        this.possibleMovesIDs = this.showPossibleMoves();\n        this.parentSquare = document.getElementById(`${this.positionX}-${this.positionY}`); //<-- parentSquare przechowuje diva, w którym obecnie znajduje się figura\n        this.moveTimeArray = [];\n        Piece.movesHistory = [];\n        this.lastMove = '';\n        this.moves = [];\n    }\n    setOnBoard(pX, pY) {\n        //w pierwszych dwóch linijkach usuwamy figurę z obecnego miejsca, następnie ustawiamy w nowym\n        this.parentSquare.innerHTML = \"\";\n        this.parentSquare.classList.remove('pieceInside');\n        const img = document.createElement('img');\n        img.classList.add('image');\n        img.classList.add(`${this.color}`.toLowerCase());\n        img.setAttribute('src', this.symbol);\n        this.updatePosition(pX, pY);\n        this.parentSquare.appendChild(img);\n        const imgContainer = img.parentElement;\n        imgContainer.classList.add('pieceInside');\n        game_1.Game.changeTurn();\n        //Game.changeTimerTurn();\n        game_1.Game.endOfTime();\n    }\n    updatePosition(pX, pY) {\n        this.positionX = pX;\n        this.positionY = pY;\n        this.parentSquare = document.getElementById(`${this.positionX}-${this.positionY}`);\n    }\n    removeClassActive() {\n        let elems = document.querySelectorAll('.active');\n        for (var i = 0; i < elems.length; i++) {\n            elems[i].classList.remove('active');\n            if (elems[i].classList.contains('en-pass')) {\n                elems[i].classList.remove('en-pass');\n            }\n        }\n    }\n    // HISTORIA RUCHÓW\n    history(square) {\n        const fromPositionX = this.getPositionX();\n        const fromPositionY = this.getPositionY().toString();\n        const toPositionX = `${(square).id.charAt(0)}`;\n        const toPositionY = `${parseInt((square).id.charAt(2))}`;\n        Piece.movesHistory.push([fromPositionX, fromPositionY, toPositionX, toPositionY]);\n        this.moves.push([fromPositionX, fromPositionY, toPositionX, toPositionY]);\n    }\n    //OPIS RUCHÓW\n    historyNotation() {\n        let name;\n        let movedTo;\n        let movedFrom;\n        let timeStampWhite = document.querySelector('#timer-white')?.innerHTML;\n        let timeStampBlack = document.querySelector('#timer-black')?.innerHTML;\n        const time = game_1.Game.round % 2 === 0 ? timeStampWhite : timeStampBlack;\n        let beatedPiece = Piece.beated.pop();\n        const movesHistoryClone = Piece.movesHistory.slice();\n        const createNotation = movesHistoryClone.pop();\n        if (typeof createNotation === 'undefined')\n            return;\n        if (typeof createNotation[2] === 'undefined')\n            return;\n        if (typeof createNotation[0] === 'undefined')\n            return;\n        if (!time)\n            return;\n        //CZAS WYKONANIA RUCHU\n        this.moveTimeArray.push(time);\n        if (document.documentElement.lang === 'pl') {\n            movedFrom = 'poruszył/a się z pola';\n            movedTo = 'na pole';\n            name = translateFunc_1.getName(this.constructor.name);\n            //RUCHY\n            const descriptive = `${name} ${movedFrom} ${createNotation[0]}-${createNotation[1]} ${movedTo} ${createNotation[2]}-${createNotation[3]}`;\n            this.lastMove = descriptive;\n            //NOTACJA DLA BICIA\n            if (beatedPiece) {\n                const descriptive = `${translateFunc_1.getName(beatedPiece.color)} ${translateFunc_1.getName(beatedPiece.constructor.name).toLowerCase()} został zbity przez ${translateFunc_1.getName(this.color).toLowerCase()} ${name.toLowerCase()}`;\n                this.lastMove = descriptive;\n            }\n            addMoveHistory_1.addMoveHistory(this.lastMove, `${time} ${translateFunc_1.getName(this.color)}`);\n            //EN VERSION\n        }\n        else if (document.documentElement.lang === 'en') {\n            movedFrom = 'moved from';\n            movedTo = 'to';\n            name = this.constructor.name;\n            //RUCHY\n            const descriptive = `${name} ${movedFrom} ${createNotation[0]}-${createNotation[1]} ${movedTo} ${createNotation[2]}-${createNotation[3]}`;\n            this.lastMove = descriptive;\n            //BICIE\n            if (beatedPiece) {\n                const descriptive = `${beatedPiece.color} ${beatedPiece.constructor.name.toLowerCase()} was beaten by ${this.color.toLowerCase()} ${name.toLowerCase()}`;\n                this.lastMove = descriptive;\n            }\n            addMoveHistory_1.addMoveHistory(this.lastMove, `${time} ${this.color}`);\n        }\n    }\n    //COFANIE RUCHÓW\n    reverseLastMove(color) {\n        const lastMove = this.moves;\n        if (this.moveTimeArray.length === 0) {\n            return;\n        }\n        ;\n        if (lastMove.length === 0) {\n            return;\n        }\n        ;\n        const popLastMove = lastMove.pop();\n        this.removeClassActive();\n        if (popLastMove) {\n            const positionX = popLastMove[0];\n            const positionY = popLastMove[1];\n            if (positionX && positionY) {\n                this.setOnBoard(positionX.toUpperCase(), parseInt(positionY));\n                color === 'white' ? this.reverseTimeWhite() : this.reverseTimeBlack();\n            }\n        }\n    }\n    static retLast() {\n        const black = game_1.Game.getBlacks();\n        const white = game_1.Game.getWhites();\n        const last = game_1.Game.beated.pop();\n        const color = last?.color;\n        console.log(last.positionX, last.positionY, last);\n        if (!last) {\n            return;\n        }\n        ;\n        if (color === 'black') {\n            console.log(color, 1);\n            last.setOnBoard(last.positionX, last.positionY);\n            black.push(last);\n            return;\n        }\n        else {\n            console.log(color, 3);\n            last.setOnBoard(last.positionX, last.positionY);\n            white.push(last);\n            return;\n        }\n    }\n    reverseTimeWhite() {\n        if (this.moveTimeArray.length === 0) {\n            return;\n        }\n        ;\n        const time = this.moveTimeArray.pop();\n        if (!time) {\n            return;\n        }\n        ;\n        game_1.Game.getWhiteTimer().setTimer(time);\n        const timerWhite = document.querySelector('#timer-white');\n        timerWhite.innerHTML = time;\n    }\n    reverseTimeBlack() {\n        if (this.moveTimeArray.length === 0) {\n            return;\n        }\n        ;\n        const time = this.moveTimeArray.pop();\n        if (!time) {\n            return;\n        }\n        ;\n        game_1.Game.getBlackTimer().setTimer(time);\n        const timerBlack = document.querySelector('#timer-black');\n        timerBlack.innerHTML = time;\n    }\n    getPositionX() {\n        return this.positionX;\n    }\n    getPositionY() {\n        return this.positionY;\n    }\n    getColor() {\n        return this.color;\n    }\n    defendKing(possibleMoves) {\n        const initialX = this.positionX;\n        const initialY = this.positionY;\n        const king = this.color === 'white' ? game_1.Game.getWhiteKing() : game_1.Game.getBlackKing();\n        const defendingIDs = [];\n        possibleMoves.forEach(move => {\n            const posX = move.charAt(0);\n            const posY = parseFloat(move.charAt(2));\n            if (document.querySelector(`#${move}`).innerHTML === '') {\n                this.setOnBoard(posX, posY);\n                game_1.Game.changeTurn();\n                if (!king.isChecked())\n                    defendingIDs.push(move);\n            }\n            else {\n                let originalPiece;\n                if (this.color === 'white') {\n                    for (let p of game_1.Game.getBlacks()) {\n                        if (p.getPositionX() === posX && p.getPositionY() === posY) {\n                            originalPiece = p;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (let p of game_1.Game.getWhites()) {\n                        if (p.getPositionX() === posX && p.getPositionY() === posY) {\n                            originalPiece = p;\n                            break;\n                        }\n                    }\n                }\n                if (king.isChecked()) {\n                    if (king.isKingCheckedByThisPiece(originalPiece)) {\n                        console.log(123);\n                        defendingIDs.push(`${originalPiece.getPositionX()}-${originalPiece.getPositionY()}`);\n                    }\n                }\n                else {\n                    defendingIDs.push(`${originalPiece.getPositionX()}-${originalPiece.getPositionY()}`);\n                }\n            }\n        });\n        this.setOnBoard(initialX, initialY);\n        game_1.Game.changeTurn();\n        return defendingIDs;\n    }\n}\nexports.Piece = Piece;\nPiece.beated = [];\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/piece.js?");

/***/ }),

/***/ "./src/js-components/pieces/queen.js":
/*!*******************************************!*\
  !*** ./src/js-components/pieces/queen.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Queen = void 0;\nconst board_1 = __webpack_require__(/*! ../board */ \"./src/js-components/board.js\");\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\n//królowa / hetman\nclass Queen extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.symbol = `./../../../Projekt3-chess/static/assets/${this.color}Queen.png`;\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        const allPossibleMoves = [];\n        this.collectAllPossibleMoves().forEach(id => {\n            allPossibleMoves.push(id);\n        });\n        return allPossibleMoves;\n    }\n    move() {\n        this.removeClassActive();\n        // const movesShow:MovesShow =(id:string)=>{\n        //     const movesPossibilities = [...document.querySelectorAll(`#${id}`)];\n        //         movesPossibilities.forEach(el=>{\n        //                 el.classList.add('active');\n        //         })\n        //  }\n        this.defendKing(this.showPossibleMoves()).forEach(id => {\n            document.querySelector(`#${id}`).classList.add('active');\n            // movesShow(id)\n        });\n        const squares = [...document.querySelectorAll('.active')];\n        squares.forEach(square => {\n            square.addEventListener('click', () => {\n                if ((square).classList.contains('active')\n                    && (game_1.Game.getLastChosen() === this)) {\n                    if (square.innerHTML != '') {\n                        game_1.Game.beat(square);\n                    }\n                    //ZBIERANIE HISTORII RUCHÓW\n                    this.history(square);\n                    this.historyNotation();\n                    //\n                    this.setOnBoard((square).id.charAt(0), parseInt((square).id.charAt(2)));\n                    this.removeClassActive();\n                    game_1.Game.checkingKings();\n                    game_1.Game.changeTimerTurn();\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                }\n            }, { capture: true });\n        });\n    }\n    collectAllPossibleMoves() {\n        const coordinateX = Object.values(board_1.ID).indexOf(this.positionX) + 1;\n        const moves = [];\n        const moveUp = () => {\n            for (let i = this.positionY + 1; i < 9; i++) {\n                const doc = document.getElementById(`${this.positionX}-${i}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector('img')?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${this.positionX}-${i}`);\n                        return;\n                    }\n                    else {\n                        return;\n                    }\n                }\n                else {\n                    moves.push(`${this.positionX}-${i}`);\n                    // return;\n                }\n            }\n        };\n        const moveDown = () => {\n            for (let j = this.positionY - 1; j > 0; j--) {\n                const doc = document.getElementById(`${this.positionX}-${j}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector('img')?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${this.positionX}-${j}`);\n                        return;\n                    }\n                    else {\n                        return;\n                    }\n                }\n                else {\n                    moves.push(`${this.positionX}-${j}`);\n                }\n            }\n        };\n        const moveRight = () => {\n            for (let i = coordinateX + 1; i < 9; i++) {\n                const doc = document.getElementById(`${board_1.ID[i]}-${this.positionY}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector('img')?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[i]}-${this.positionY}`);\n                        return;\n                    }\n                    else {\n                        return;\n                    }\n                }\n                else {\n                    moves.push(`${board_1.ID[i]}-${this.positionY}`);\n                }\n            }\n        };\n        const moveLeft = () => {\n            for (let i = coordinateX - 1; i > 0; i--) {\n                const doc = document.getElementById(`${board_1.ID[i]}-${this.positionY}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector('img')?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[i]}-${this.positionY}`);\n                        return;\n                    }\n                    else {\n                        return;\n                    }\n                }\n                else {\n                    moves.push(`${board_1.ID[i]}-${this.positionY}`);\n                }\n            }\n        };\n        const diagonalMoves = () => {\n            // top right\n            let position;\n            if (9 - coordinateX < 9 - this.positionY) {\n                position = 9 - coordinateX;\n            }\n            else {\n                position = 9 - this.positionY;\n            }\n            for (let i = 1; i < position; i++) {\n                const doc = document.getElementById(`${board_1.ID[coordinateX + i]}-${this.positionY + i}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector(\"img\")?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[coordinateX + i]}-${this.positionY + i}`);\n                    }\n                    break;\n                }\n                else {\n                    moves.push(`${board_1.ID[coordinateX + i]}-${this.positionY + i}`);\n                }\n            }\n            // down left\n            if (this.positionY - 1 < coordinateX - 1) {\n                position = this.positionY;\n            }\n            else {\n                position = coordinateX;\n            }\n            for (let i = 1; i < position; i++) {\n                const doc = document.getElementById(`${board_1.ID[coordinateX - i]}-${this.positionY - i}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector(\"img\")?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[coordinateX - i]}-${this.positionY - i}`);\n                    }\n                    break;\n                }\n                else {\n                    moves.push(`${board_1.ID[coordinateX - i]}-${this.positionY - i}`);\n                }\n            }\n            // top left\n            if (coordinateX < 9 - this.positionY) {\n                position = coordinateX;\n            }\n            else {\n                position = 9 - this.positionY;\n            }\n            for (let i = 1; i < position; i++) {\n                const doc = document.getElementById(`${board_1.ID[coordinateX - i]}-${this.positionY + i}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector(\"img\")?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[coordinateX - i]}-${this.positionY + i}`);\n                    }\n                    break;\n                }\n                else {\n                    moves.push(`${board_1.ID[coordinateX - i]}-${this.positionY + i}`);\n                }\n            }\n            // down right\n            if (this.positionY < 9 - coordinateX) {\n                position = this.positionY;\n            }\n            else {\n                position = 9 - coordinateX;\n            }\n            for (let i = 1; i < position; i++) {\n                const doc = document.getElementById(`${board_1.ID[coordinateX + i]}-${this.positionY - i}`);\n                const checker = doc.classList.contains('pieceInside');\n                const colorCheck = doc.querySelector(\"img\")?.classList.contains(`${this.color}`);\n                if (checker) {\n                    if (!colorCheck) {\n                        moves.push(`${board_1.ID[coordinateX + i]}-${this.positionY - i}`);\n                    }\n                    break;\n                }\n                else {\n                    moves.push(`${board_1.ID[coordinateX + i]}-${this.positionY - i}`);\n                }\n            }\n        };\n        diagonalMoves();\n        moveUp();\n        moveDown();\n        moveLeft();\n        moveRight();\n        return moves;\n    }\n}\nexports.Queen = Queen;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/queen.js?");

/***/ }),

/***/ "./src/js-components/pieces/rook.js":
/*!******************************************!*\
  !*** ./src/js-components/pieces/rook.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\"use stricte\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Rook = void 0;\nconst piece_1 = __webpack_require__(/*! ./piece */ \"./src/js-components/pieces/piece.js\");\nconst game_1 = __webpack_require__(/*! ../game */ \"./src/js-components/game.js\");\nconst endGameCases_1 = __webpack_require__(/*! ../endGameCases */ \"./src/js-components/endGameCases.js\");\n//wieża\nclass Rook extends piece_1.Piece {\n    constructor(color, positionX, positionY) {\n        super(color, positionX, positionY);\n        this.hasMoved = false;\n        this.symbol = `./../../../Projekt3-chess/static/assets/${this.color}Rook.png`;\n        this.setOnBoard(this.positionX, this.positionY);\n    }\n    showPossibleMoves() {\n        //this.removeClassActive();\n        const arrayOfX = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        // const indexOfX:number = arrayOfX.indexOf(this.getPositionX());\n        const PossibleMoves = [];\n        const rookLineX = this.getPositionX();\n        const rookLineY = this.getPositionY();\n        const checkYAxis = () => {\n            // top\n            //console.log(rookLineX,rookLineY)\n            for (let i = rookLineY + 1; i <= 8; i++) {\n                let squareY = document.querySelector(`#${rookLineX}-${i}`);\n                if (!(squareY?.querySelector('img')) || squareY.innerHTML === \"\") {\n                    if (squareY != null)\n                        // squareY.classList.add('active');\n                        PossibleMoves.push(`${rookLineX}-${i}`);\n                }\n                else {\n                    if (!(squareY?.querySelector('img')?.classList.contains(this.color))) {\n                        PossibleMoves.push(`${rookLineX}-${i}`);\n                        break;\n                    }\n                    break;\n                }\n            }\n            // bot\n            for (let i = rookLineY - 1; i > 0; i--) {\n                let squareY = document.querySelector(`#${rookLineX}-${i}`);\n                if (!(squareY?.querySelector('img')) || squareY.innerHTML === \"\") {\n                    if (squareY != null)\n                        // squareY.classList.add('active');\n                        PossibleMoves.push(`${rookLineX}-${i}`);\n                }\n                else {\n                    if (!(squareY?.querySelector('img')?.classList.contains(this.color))) {\n                        PossibleMoves.push(`${rookLineX}-${i}`);\n                        break;\n                    }\n                    break;\n                }\n            }\n        };\n        const checkXAxis = () => {\n            // right\n            const clickedElementIndex = arrayOfX.indexOf(rookLineX);\n            for (let i = clickedElementIndex; i <= 7; i++) {\n                let squareY = document.querySelector(`#${arrayOfX[i + 1]}-${rookLineY}`);\n                if (!(squareY?.querySelector('img')) || squareY.innerHTML === \"\") {\n                    if (squareY != null)\n                        // squareY.classList.add('active');\n                        PossibleMoves.push(`${arrayOfX[i + 1]}-${rookLineY}`);\n                }\n                else {\n                    if (!(squareY?.querySelector('img')?.classList.contains(this.color))) {\n                        PossibleMoves.push(`${arrayOfX[i + 1]}-${rookLineY}`);\n                        break;\n                    }\n                    break;\n                }\n            }\n            // left\n            for (let i = clickedElementIndex; i > 0; i--) {\n                let squareY = document.querySelector(`#${arrayOfX[i - 1]}-${rookLineY}`);\n                if (!(squareY?.querySelector('img')) || squareY.innerHTML === \"\") {\n                    if (squareY != null)\n                        // squareY.classList.add('active');\n                        PossibleMoves.push(`${arrayOfX[i - 1]}-${rookLineY}`);\n                }\n                else {\n                    if (!(squareY?.querySelector('img')?.classList.contains(this.color))) {\n                        PossibleMoves.push(`${arrayOfX[i - 1]}-${rookLineY}`);\n                        break;\n                    }\n                    break;\n                }\n            }\n        };\n        checkYAxis();\n        checkXAxis();\n        // const squares:NodeList = document.querySelectorAll('.board-container div');\n        // squares.forEach(square => {\n        //     square.addEventListener('click', (e) => {\n        //         let pickedFigure = e.currentTarget;\n        //         if(!((square as HTMLElement).classList.contains('pieceInside')) && (square as HTMLElement).classList.contains('active')   && (Game.getLastChosen() === this)){\n        //             this.setOnBoard((square as HTMLElement).id.charAt(0), parseInt((square as HTMLElement).id.charAt(2)));\n        //             squares.forEach(square => (square as HTMLElement).classList.remove('active'));\n        //         }\n        //     });\n        // });\n        return PossibleMoves;\n    }\n    move() {\n        this.removeClassActive();\n        let possibleMovesArr = this.showPossibleMoves();\n        possibleMovesArr = this.defendKing(possibleMovesArr);\n        possibleMovesArr.forEach(id => {\n            const square = document.querySelector(`#${id}`);\n            square.classList.add('active'); //<--oznaczenie wizualne na szachownicy\n            square.addEventListener('click', () => {\n                if (square.classList.contains('active') && (game_1.Game.getLastChosen() === this)) {\n                    if (square.innerHTML != '') {\n                        game_1.Game.beat(square);\n                    }\n                    //ZBIERANIE HISTORII RUCHÓW\n                    this.history(square);\n                    this.historyNotation();\n                    //\n                    this.setOnBoard(square.id.charAt(0), parseInt(square.id.charAt(2))); //<-- przeniesienie figury po kliknięciu\n                    this.hasMoved = true;\n                    this.removeClassActive();\n                    game_1.Game.checkingKings();\n                    game_1.Game.changeTimerTurn();\n                    endGameCases_1.endGame(game_1.Game.player1Name, game_1.Game.player2Name, game_1.Game.target);\n                }\n            }, { capture: true });\n        });\n    }\n}\nexports.Rook = Rook;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/pieces/rook.js?");

/***/ }),

/***/ "./src/js-components/promotion.js":
/*!****************************************!*\
  !*** ./src/js-components/promotion.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ifPromotion = void 0;\nconst board_1 = __webpack_require__(/*! ./board */ \"./src/js-components/board.js\");\nfunction ifPromotion() {\n    const possiblePromotion = [];\n    for (var i = 1; i < 9; i++) {\n        let idPossiblePromotion1 = `${board_1.ID[i]}-1`;\n        let idPossiblePromotion2 = `${board_1.ID[i]}-8`;\n        possiblePromotion.push(idPossiblePromotion1, idPossiblePromotion2);\n    }\n    const promotion = [];\n    possiblePromotion.forEach((possibility) => {\n        if (document.getElementById(possibility).classList.contains('promotion')) {\n            promotion.push(possibility);\n        }\n    });\n    return promotion.length > 0;\n}\nexports.ifPromotion = ifPromotion;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/promotion.js?");

/***/ }),

/***/ "./src/js-components/starting_page/lang.js":
/*!*************************************************!*\
  !*** ./src/js-components/starting_page/lang.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nfunction lang() {\n    const divLang = document.createElement(\"div\");\n    divLang.className = \"lang\";\n    const imgEng = document.createElement(\"img\");\n    const srcEng = \"../../../../Projekt3-chess/static/assets/eng.png\";\n    imgEng.setAttribute('src', srcEng);\n    imgEng.className = \"eng\";\n    const imgPl = document.createElement(\"img\");\n    const srcPl = \"../../../../Projekt3-chess/static/assets/pl.png\";\n    imgPl.setAttribute('src', srcPl);\n    imgPl.className = \"pl\";\n    divLang.appendChild(imgEng);\n    divLang.appendChild(imgPl);\n    return divLang;\n}\nmodule.exports = lang;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/starting_page/lang.js?");

/***/ }),

/***/ "./src/js-components/starting_page/logo.js":
/*!*************************************************!*\
  !*** ./src/js-components/starting_page/logo.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nfunction logo() {\n    const divLogo = document.createElement(\"div\");\n    divLogo.className = \"logo\";\n    const imgLogo = document.createElement(\"img\");\n    const src = \"../../../../Projekt3-chess/static/assets/CodersChess.png\";\n    imgLogo.setAttribute('src', src);\n    imgLogo.addEventListener(\"click\", function () {\n        location.reload();\n    });\n    divLogo.appendChild(imgLogo);\n    return divLogo;\n}\nmodule.exports = logo;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/starting_page/logo.js?");

/***/ }),

/***/ "./src/js-components/starting_page/menuContainer.js":
/*!**********************************************************!*\
  !*** ./src/js-components/starting_page/menuContainer.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nfunction title() {\n    const titleDiv = document.createElement(\"div\");\n    titleDiv.className = \"menuTitle\";\n    const title = document.createElement(\"h2\");\n    title.innerHTML = \"USTAWIENIA GRY\";\n    if (document.documentElement.lang === 'en') {\n        title.innerHTML = \"GAME SETTINGS\";\n    }\n    titleDiv.appendChild(title);\n    return title;\n}\nfunction menuNames() {\n    const nameDiv = document.createElement(\"div\");\n    nameDiv.className = \"menuNames\";\n    const title = document.createElement(\"h4\");\n    title.innerHTML = \"IMIONA GRACZY\";\n    const inputDiv = document.createElement(\"div\");\n    const field1 = document.createElement(\"fieldset\");\n    const legend1 = document.createElement(\"legend\");\n    legend1.innerHTML = \"Białe | nazwa gracza\";\n    const player1 = document.createElement(\"input\");\n    player1.type = \"text\";\n    player1.minLength = 2;\n    player1.maxLength = 20;\n    player1.id = \"player1-input\";\n    player1.required = true;\n    player1.placeholder = \"Brajan\";\n    field1.appendChild(legend1);\n    field1.appendChild(player1);\n    const field2 = document.createElement(\"fieldset\");\n    const legend2 = document.createElement(\"legend\");\n    legend2.innerHTML = \"Czarne | nazwa gracza\";\n    const player2 = document.createElement(\"input\");\n    player2.type = \"text\";\n    player2.minLength = 2;\n    player2.maxLength = 20;\n    player2.id = \"player2-input\";\n    player2.required = true;\n    player2.placeholder = \"Jessica\";\n    if (document.documentElement.lang === 'en') {\n        title.innerHTML = \"PLAYER NAMES\";\n        legend1.innerHTML = \"White | player name\";\n        legend2.innerHTML = \"Black | player name\";\n    }\n    field2.appendChild(legend2);\n    field2.appendChild(player2);\n    inputDiv.appendChild(field1);\n    inputDiv.appendChild(field2);\n    nameDiv.appendChild(title);\n    nameDiv.appendChild(inputDiv);\n    return nameDiv;\n}\nfunction time() {\n    const timeDiv = document.createElement(\"div\");\n    timeDiv.className = \"menuTime\";\n    const title = document.createElement(\"h4\");\n    title.className = \"title-time\";\n    title.innerHTML = \"CZAS GRY\";\n    const inMinutes = document.createElement(\"span\");\n    inMinutes.innerHTML = \"[W MINUTACH]\";\n    title.appendChild(inMinutes);\n    const rangeSlider = document.createElement(\"div\");\n    rangeSlider.className = \"range-slider\";\n    const span = document.createElement(\"span\");\n    span.className = \"rs-label\";\n    span.innerHTML = \"60\";\n    const range = document.createElement(\"input\");\n    range.type = \"range\";\n    range.className = \"rs-range\";\n    range.min = \"60\";\n    range.max = \"180\";\n    range.step = \"10\";\n    if (document.documentElement.lang === 'en') {\n        title.innerHTML = \"GAME TIME\";\n        inMinutes.innerHTML = '[IN MINUTES]';\n    }\n    rangeSlider.addEventListener(\"input\", showSliderValue, false);\n    function showSliderValue() {\n        span.innerHTML = range.value;\n    }\n    rangeSlider.appendChild(range);\n    rangeSlider.appendChild(span);\n    timeDiv.appendChild(title);\n    timeDiv.appendChild(rangeSlider);\n    return timeDiv;\n}\nfunction patCheckList() {\n    const titleDiv = document.createElement(\"div\");\n    titleDiv.className = \"menuCheckList\";\n    const title = document.createElement(\"h4\");\n    title.innerHTML = \"PAT JAKO WYGRANA\";\n    // const label3 = document.createElement(\"label\");\n    // const input3 = document.createElement(\"input\");\n    // input3.type = \"radio\";\n    // input3.id = \"pat2\";\n    // input3.name = \"pat\";\n    // input3.checked = true;\n    // const inputSpan3 = document.createElement(\"span\");\n    // inputSpan3.innerHTML = \"REMIS\";\n    // label3.appendChild(input3);\n    // label3.appendChild(inputSpan3);\n    const label1 = document.createElement(\"label\");\n    const input1 = document.createElement(\"input\");\n    input1.type = \"radio\";\n    input1.id = \"pat1\";\n    input1.name = \"pat\";\n    input1.checked = true;\n    const inputSpan1 = document.createElement(\"span\");\n    inputSpan1.innerHTML = \"PATUJĄCEGO\";\n    label1.appendChild(input1);\n    label1.appendChild(inputSpan1);\n    const label2 = document.createElement(\"label\");\n    const input2 = document.createElement(\"input\");\n    input2.type = \"radio\";\n    input2.id = \"pat2\";\n    input2.name = \"pat\";\n    const inputSpan2 = document.createElement(\"span\");\n    inputSpan2.innerHTML = \"PATOWANEGO\";\n    label2.appendChild(input2);\n    label2.appendChild(inputSpan2);\n    titleDiv.appendChild(title);\n    titleDiv.appendChild(label1);\n    titleDiv.appendChild(label2);\n    // titleDiv.appendChild(label3);\n    if (document.documentElement.lang === 'en') {\n        title.innerHTML = \"STALEMATE AS\";\n        inputSpan1.innerHTML = \"LOOSE FOR STALEMATED PLAYER\";\n        inputSpan2.innerHTML = \"WIN FOR STALEMATED PLAYER\";\n    }\n    return titleDiv;\n}\nfunction startButton() {\n    const startButtonContainer = document.createElement(\"div\");\n    startButtonContainer.className = \"start-button\";\n    const startButtonText = document.createElement(\"p\");\n    startButtonText.innerHTML = \"ROZPOCZNIJ GRĘ!\";\n    if (document.documentElement.lang === 'en') {\n        startButtonText.innerHTML = \"PLAY\";\n    }\n    startButtonContainer.appendChild(startButtonText);\n    return startButtonContainer;\n}\nfunction menuContainer() {\n    const menu = document.createElement(\"div\");\n    menu.className = \"menuContainer\";\n    menu.appendChild(title());\n    menu.appendChild(menuNames());\n    menu.appendChild(time());\n    menu.appendChild(patCheckList());\n    menu.appendChild(startButton());\n    return menu;\n}\nmodule.exports = menuContainer;\n// document.body.appendChild(menuContainer());\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/starting_page/menuContainer.js?");

/***/ }),

/***/ "./src/js-components/timeHistoryContainer.js":
/*!***************************************************!*\
  !*** ./src/js-components/timeHistoryContainer.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.timeHistory = void 0;\nclass timeHistory {\n    timeHistoryContainer() {\n        const timeHistoryContainer = document.createElement(\"div\");\n        timeHistoryContainer.className = \"time-history-container\";\n        const timeHeader = document.createElement(\"div\");\n        timeHeader.className = \"time-div\";\n        const gameTime = document.createElement(\"h4\");\n        gameTime.innerHTML = \"CZAS GRY\";\n        timeHeader.appendChild(gameTime);\n        const timer1 = document.createElement(\"div\");\n        timer1.id = \"timer1\";\n        const timerWhite = document.createElement(\"div\");\n        timerWhite.id = \"timer-white\";\n        const white = document.createElement(\"h5\");\n        white.innerHTML = \"BIAŁE\";\n        timer1.appendChild(white);\n        timer1.appendChild(timerWhite);\n        const timer2 = document.createElement(\"div\");\n        timer2.id = \"timer2\";\n        const timerBlack = document.createElement(\"div\");\n        timerBlack.id = \"timer-black\";\n        const black = document.createElement(\"h5\");\n        black.innerHTML = \"CZARNE\";\n        timer2.appendChild(black);\n        timer2.appendChild(timerBlack);\n        timeHeader.appendChild(timer1);\n        timeHeader.appendChild(timer2);\n        timeHistoryContainer.appendChild(timeHeader);\n        // HISTORY CONTAINER\n        const historyContainer = document.createElement(\"div\");\n        historyContainer.className = \"history-div\";\n        const historyHeader = document.createElement(\"h4\");\n        historyHeader.innerHTML = \"HISTORIA GRY\";\n        historyContainer.appendChild(historyHeader);\n        const historyBody = document.createElement(\"div\");\n        historyBody.className = \"history-div-body\";\n        historyContainer.appendChild(historyBody);\n        timeHistoryContainer.appendChild(historyContainer);\n        // BUTTONS\n        const buttonContainer = document.createElement(\"div\");\n        buttonContainer.className = \"button-div\";\n        const exitButton = document.createElement(\"p\");\n        exitButton.className = \"exit-button\";\n        exitButton.innerHTML = \"WYJDŹ Z GRY\";\n        const undoButton = document.createElement(\"p\");\n        undoButton.className = \"undo-button\";\n        undoButton.innerHTML = \"COFNIJ RUCH\";\n        if (document.documentElement.lang === 'en') {\n            gameTime.innerHTML = \"GAME TIME\";\n            white.innerHTML = \"WHITE\";\n            black.innerHTML = \"BLACK\";\n            historyHeader.innerHTML = \"CHESS MOVES\";\n            exitButton.innerHTML = \"LEAVE GAME\";\n            undoButton.innerHTML = \"REVERSE LAST MOVE\";\n        }\n        buttonContainer.appendChild(exitButton);\n        buttonContainer.appendChild(undoButton);\n        timeHistoryContainer.appendChild(buttonContainer);\n        document.querySelector('body').appendChild(timeHistoryContainer);\n        return timeHistoryContainer;\n    }\n}\nexports.timeHistory = timeHistory;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/timeHistoryContainer.js?");

/***/ }),

/***/ "./src/js-components/timer.js":
/*!************************************!*\
  !*** ./src/js-components/timer.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Timer = void 0;\nclass Timer {\n    constructor(minutes, player) {\n        this.start = this.start.bind(this);\n        this.pause = this.pause.bind(this);\n        this.player = player;\n        this.seconds = minutes * 60;\n        this.restart = minutes * 60;\n        this.timerHandler = document.querySelector(`#${this.player}`);\n        this.interval = 0;\n        this.timerHandler.innerHTML = minutes < 10 ? `0${minutes}:00` : `${minutes}:00`;\n    }\n    start() {\n        this.timedown();\n        this.interval = window.setInterval(() => this.timedown(), 1000);\n    }\n    ;\n    pause() {\n        window.clearInterval(this.interval);\n    }\n    ;\n    stop() {\n        this.pause();\n        console.log(\"STOP\");\n        // wywołanie okna modalnego\n    }\n    setTimer(time) {\n        let minutes = parseInt(time.substring(0, 2));\n        let seconds = parseInt(time.substring(3, 5));\n        this.seconds = minutes * 60 + seconds;\n    }\n    ;\n    restartTimer() {\n        this.seconds = this.restart;\n        this.start();\n    }\n    timedown() {\n        this.timerHandler.innerHTML = this.convertSeconds(this.seconds);\n        if (this.seconds > 0) {\n            this.seconds--;\n            return this.seconds;\n        }\n        else\n            this.stop();\n        return;\n    }\n    convertSeconds(s) {\n        let min = Math.floor(s / 60);\n        let sec = s % 60;\n        min = min < 10 ? '0' + min : min;\n        sec = sec < 10 ? '0' + sec : sec;\n        return min + ':' + sec;\n    }\n}\nexports.Timer = Timer;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/timer.js?");

/***/ }),

/***/ "./src/js-components/translateFunc.js":
/*!********************************************!*\
  !*** ./src/js-components/translateFunc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getName = void 0;\nconst getName = (constructorName) => {\n    switch (constructorName) {\n        case 'Queen':\n            return 'Królowa';\n        case 'Rook':\n            return 'Wieża';\n        case 'Knight':\n            return 'Skoczek';\n        case 'Bishop':\n            return 'Goniec';\n        case 'King':\n            return 'Król';\n        case 'white':\n            return 'Biały';\n        case 'black':\n            return 'Czarny';\n        default:\n            return 'Pion';\n    }\n};\nexports.getName = getName;\n\n\n//# sourceURL=webpack://projekt3-chess/./src/js-components/translateFunc.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;